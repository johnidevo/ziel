In file ./Artifacts/o1/Addition.bin-runtime
Correctly loaded VM
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40

W
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
0x7     ISZERO          Simple not operator
0x8     PUSH1           Place 1-byte item on stack 0xf
0xa     JUMPI           Conditionally alter the program counter
0xf     JUMPDEST        Mark a valid destination for jumps
0x10    POP             Remove item from stack
0x11    PUSH1           Place 1-byte item on stack 0x4
0x13    CALLDATASIZE    Get size of input data in current environment
0x14    LT              Less-than comparison
0x15    PUSH1           Place 1-byte item on stack 0x32
0x17    JUMPI           Conditionally alter the program counter
0x32    JUMPDEST        Mark a valid destination for jumps
0x33    PUSH1           Place 1-byte item on stack 0x0
0x35    DUP1            Duplicate 1st stack item
0x37    JUMPDEST        Mark a valid destination for jumps
0x38    PUSH1           Place 1-byte item on stack 0x3f
0x3a    PUSH1           Place 1-byte item on stack 0x0
0x3c    SLOAD           Load word from storage
0x3d    DUP2            Duplicate 2nd stack item
0x3e    JUMP            Alter the program counter
0x0     PUSH1           Place 1-byte item on stack 0x80
0x2     PUSH1           Place 1-byte item on stack 0x40
0x4     MSTORE          Save word to memory
0x5     CALLVALUE       Get deposited value by the instruction/transaction responsible for this execution
0x6     DUP1            Duplicate 1st stack item
last:280
pc:7
code.len:281

pc:7

Stack:
|45:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64]|
|44:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|43:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|42:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|36:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|35:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|34:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|33:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|32:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|31:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|30:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|29:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|28:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|27:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|26:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|25:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|24:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|23:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|22:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|21:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|20:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|19:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|18:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|17:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|16:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|15:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|14:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|13:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|12:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|11:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|10:    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|9:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|8:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|7:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|6:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|5:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|4:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
|3:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]|
|2:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]|
|1:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]|
|0:     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]|
debug_stack
[128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 64]
debug_memory
[]
debug_stack
[128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 4, 0, 63, 128, 64]
debug_memory
[]